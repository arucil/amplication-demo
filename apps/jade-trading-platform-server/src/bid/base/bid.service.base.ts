/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Bid as PrismaBid,
  Auction as PrismaAuction,
  User as PrismaUser,
} from "@prisma/client";

export class BidServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BidCountArgs, "select">): Promise<number> {
    return this.prisma.bid.count(args);
  }

  async bids(args: Prisma.BidFindManyArgs): Promise<PrismaBid[]> {
    return this.prisma.bid.findMany(args);
  }
  async bid(args: Prisma.BidFindUniqueArgs): Promise<PrismaBid | null> {
    return this.prisma.bid.findUnique(args);
  }
  async createBid(args: Prisma.BidCreateArgs): Promise<PrismaBid> {
    return this.prisma.bid.create(args);
  }
  async updateBid(args: Prisma.BidUpdateArgs): Promise<PrismaBid> {
    return this.prisma.bid.update(args);
  }
  async deleteBid(args: Prisma.BidDeleteArgs): Promise<PrismaBid> {
    return this.prisma.bid.delete(args);
  }

  async getAuction(parentId: string): Promise<PrismaAuction | null> {
    return this.prisma.bid
      .findUnique({
        where: { id: parentId },
      })
      .auction();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.bid
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
