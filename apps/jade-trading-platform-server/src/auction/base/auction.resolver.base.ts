/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Auction } from "./Auction";
import { AuctionCountArgs } from "./AuctionCountArgs";
import { AuctionFindManyArgs } from "./AuctionFindManyArgs";
import { AuctionFindUniqueArgs } from "./AuctionFindUniqueArgs";
import { CreateAuctionArgs } from "./CreateAuctionArgs";
import { UpdateAuctionArgs } from "./UpdateAuctionArgs";
import { DeleteAuctionArgs } from "./DeleteAuctionArgs";
import { BidFindManyArgs } from "../../bid/base/BidFindManyArgs";
import { Bid } from "../../bid/base/Bid";
import { Jade } from "../../jade/base/Jade";
import { AuctionService } from "../auction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Auction)
export class AuctionResolverBase {
  constructor(
    protected readonly service: AuctionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Auction",
    action: "read",
    possession: "any",
  })
  async _auctionsMeta(
    @graphql.Args() args: AuctionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Auction])
  @nestAccessControl.UseRoles({
    resource: "Auction",
    action: "read",
    possession: "any",
  })
  async auctions(
    @graphql.Args() args: AuctionFindManyArgs
  ): Promise<Auction[]> {
    return this.service.auctions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Auction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Auction",
    action: "read",
    possession: "own",
  })
  async auction(
    @graphql.Args() args: AuctionFindUniqueArgs
  ): Promise<Auction | null> {
    const result = await this.service.auction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Auction)
  @nestAccessControl.UseRoles({
    resource: "Auction",
    action: "create",
    possession: "any",
  })
  async createAuction(
    @graphql.Args() args: CreateAuctionArgs
  ): Promise<Auction> {
    return await this.service.createAuction({
      ...args,
      data: {
        ...args.data,

        jade: args.data.jade
          ? {
              connect: args.data.jade,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Auction)
  @nestAccessControl.UseRoles({
    resource: "Auction",
    action: "update",
    possession: "any",
  })
  async updateAuction(
    @graphql.Args() args: UpdateAuctionArgs
  ): Promise<Auction | null> {
    try {
      return await this.service.updateAuction({
        ...args,
        data: {
          ...args.data,

          jade: args.data.jade
            ? {
                connect: args.data.jade,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Auction)
  @nestAccessControl.UseRoles({
    resource: "Auction",
    action: "delete",
    possession: "any",
  })
  async deleteAuction(
    @graphql.Args() args: DeleteAuctionArgs
  ): Promise<Auction | null> {
    try {
      return await this.service.deleteAuction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Bid], { name: "bids" })
  @nestAccessControl.UseRoles({
    resource: "Bid",
    action: "read",
    possession: "any",
  })
  async findBids(
    @graphql.Parent() parent: Auction,
    @graphql.Args() args: BidFindManyArgs
  ): Promise<Bid[]> {
    const results = await this.service.findBids(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Jade, {
    nullable: true,
    name: "jade",
  })
  @nestAccessControl.UseRoles({
    resource: "Jade",
    action: "read",
    possession: "any",
  })
  async getJade(@graphql.Parent() parent: Auction): Promise<Jade | null> {
    const result = await this.service.getJade(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
