/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Auction as PrismaAuction,
  Bid as PrismaBid,
  Jade as PrismaJade,
} from "@prisma/client";

export class AuctionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AuctionCountArgs, "select">): Promise<number> {
    return this.prisma.auction.count(args);
  }

  async auctions(args: Prisma.AuctionFindManyArgs): Promise<PrismaAuction[]> {
    return this.prisma.auction.findMany(args);
  }
  async auction(
    args: Prisma.AuctionFindUniqueArgs
  ): Promise<PrismaAuction | null> {
    return this.prisma.auction.findUnique(args);
  }
  async createAuction(args: Prisma.AuctionCreateArgs): Promise<PrismaAuction> {
    return this.prisma.auction.create(args);
  }
  async updateAuction(args: Prisma.AuctionUpdateArgs): Promise<PrismaAuction> {
    return this.prisma.auction.update(args);
  }
  async deleteAuction(args: Prisma.AuctionDeleteArgs): Promise<PrismaAuction> {
    return this.prisma.auction.delete(args);
  }

  async findBids(
    parentId: string,
    args: Prisma.BidFindManyArgs
  ): Promise<PrismaBid[]> {
    return this.prisma.auction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bids(args);
  }

  async getJade(parentId: string): Promise<PrismaJade | null> {
    return this.prisma.auction
      .findUnique({
        where: { id: parentId },
      })
      .jade();
  }
}
