/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Jade } from "./Jade";
import { JadeCountArgs } from "./JadeCountArgs";
import { JadeFindManyArgs } from "./JadeFindManyArgs";
import { JadeFindUniqueArgs } from "./JadeFindUniqueArgs";
import { CreateJadeArgs } from "./CreateJadeArgs";
import { UpdateJadeArgs } from "./UpdateJadeArgs";
import { DeleteJadeArgs } from "./DeleteJadeArgs";
import { AuctionFindManyArgs } from "../../auction/base/AuctionFindManyArgs";
import { Auction } from "../../auction/base/Auction";
import { User } from "../../user/base/User";
import { JadeService } from "../jade.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Jade)
export class JadeResolverBase {
  constructor(
    protected readonly service: JadeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Jade",
    action: "read",
    possession: "any",
  })
  async _jadesMeta(
    @graphql.Args() args: JadeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Jade])
  @nestAccessControl.UseRoles({
    resource: "Jade",
    action: "read",
    possession: "any",
  })
  async jades(@graphql.Args() args: JadeFindManyArgs): Promise<Jade[]> {
    return this.service.jades(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Jade, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Jade",
    action: "read",
    possession: "own",
  })
  async jade(@graphql.Args() args: JadeFindUniqueArgs): Promise<Jade | null> {
    const result = await this.service.jade(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Jade)
  @nestAccessControl.UseRoles({
    resource: "Jade",
    action: "create",
    possession: "any",
  })
  async createJade(@graphql.Args() args: CreateJadeArgs): Promise<Jade> {
    return await this.service.createJade({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Jade)
  @nestAccessControl.UseRoles({
    resource: "Jade",
    action: "update",
    possession: "any",
  })
  async updateJade(@graphql.Args() args: UpdateJadeArgs): Promise<Jade | null> {
    try {
      return await this.service.updateJade({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Jade)
  @nestAccessControl.UseRoles({
    resource: "Jade",
    action: "delete",
    possession: "any",
  })
  async deleteJade(@graphql.Args() args: DeleteJadeArgs): Promise<Jade | null> {
    try {
      return await this.service.deleteJade(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Jade)
  async uploadImage(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: JadeFindUniqueArgs
  ): Promise<Jade> {
    return await this.service.uploadImage(args, file);
  }

  @graphql.Mutation(() => Jade)
  async deleteImage(
    @graphql.Args()
    args: JadeFindUniqueArgs
  ): Promise<Jade> {
    return await this.service.deleteImage(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Auction], { name: "auctions" })
  @nestAccessControl.UseRoles({
    resource: "Auction",
    action: "read",
    possession: "any",
  })
  async findAuctions(
    @graphql.Parent() parent: Jade,
    @graphql.Args() args: AuctionFindManyArgs
  ): Promise<Auction[]> {
    const results = await this.service.findAuctions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Jade): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
