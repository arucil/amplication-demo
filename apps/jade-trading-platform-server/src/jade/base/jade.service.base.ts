/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Jade as PrismaJade,
  Auction as PrismaAuction,
  User as PrismaUser,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class JadeServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.JadeCountArgs, "select">): Promise<number> {
    return this.prisma.jade.count(args);
  }

  async jades(args: Prisma.JadeFindManyArgs): Promise<PrismaJade[]> {
    return this.prisma.jade.findMany(args);
  }
  async jade(args: Prisma.JadeFindUniqueArgs): Promise<PrismaJade | null> {
    return this.prisma.jade.findUnique(args);
  }
  async createJade(args: Prisma.JadeCreateArgs): Promise<PrismaJade> {
    return this.prisma.jade.create(args);
  }
  async updateJade(args: Prisma.JadeUpdateArgs): Promise<PrismaJade> {
    return this.prisma.jade.update(args);
  }
  async deleteJade(args: Prisma.JadeDeleteArgs): Promise<PrismaJade> {
    return this.prisma.jade.delete(args);
  }

  async uploadImage<T extends Prisma.JadeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.JadeFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaJade> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "image";
    const image = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.jade.update({
      where: args.where,

      data: {
        image: image as InputJsonValue,
      },
    });
  }

  async downloadImage<T extends Prisma.JadeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.JadeFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image } = await this.prisma.jade.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image as unknown as LocalStorageFile
    );
  }

  async deleteImage<T extends Prisma.JadeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.JadeFindUniqueArgs>
  ): Promise<PrismaJade> {
    const { image } = await this.prisma.jade.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image as unknown as LocalStorageFile
    );

    return await this.prisma.jade.update({
      where: args.where,

      data: {
        image: Prisma.DbNull,
      },
    });
  }

  async findAuctions(
    parentId: string,
    args: Prisma.AuctionFindManyArgs
  ): Promise<PrismaAuction[]> {
    return this.prisma.jade
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .auctions(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.jade
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
